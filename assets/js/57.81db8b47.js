(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{362:function(a,e,r){"use strict";r.r(e);var t=r(10),s=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker-部署-v2ray"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-部署-v2ray"}},[a._v("#")]),a._v(" Docker 部署 V2Ray")]),a._v(" "),e("p",[a._v("Docker 技术是一种新的虚拟化技术，和传统的虚拟化技术不同。V2Ray 同样提供 Docker 部署方式，并且通过 Docker 来部署 V2Ray 会非常轻松高效。")]),a._v(" "),e("p",[e("strong",[a._v("Docker 只能部署在 KVM 或者 XEN 架构的 VPS 中")])]),a._v(" "),e("p",[a._v("首先安装 Docker：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo apt-get install -y docker\n")])])]),e("p",[a._v("安装完 Docker 后我们从 "),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("DockerHub"),e("OutboundLink")],1),a._v(" 通过搜索找到 "),e("a",{attrs:{href:"https://hub.docker.com/r/v2fly/v2fly-core",target:"_blank",rel:"noopener noreferrer"}},[a._v("V2Ray 官方提供的镜像"),e("OutboundLink")],1),a._v("。找到拉取镜像的命令并复制下来，在网页右侧我们可以看到命令为 "),e("code",[a._v("docker pull v2fly/v2fly-core")]),a._v("，我们将其复制下来回到命令行中粘贴并执行：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker pull v2fly/v2fly-core\n")])])]),e("p",[a._v("待 V2Ray 的 Docker 镜像拉取完成后就可以进入下一个部署阶段。在此之前，你需要在 "),e("code",[a._v("/etc")]),a._v(" 目录下新建一个文件夹 "),e("code",[a._v("v2ray")]),a._v("（也可以在其他路径，Docker 有读写权限即可），并把你的配置写好后命名为 "),e("code",[a._v("config.json")]),a._v(" 放入 "),e("code",[a._v("v2ray")]),a._v(" 文件夹内。配置文件可以参考"),e("a",{attrs:{href:"https://github.com/v2fly/v2ray-examples",target:"_blank",rel:"noopener noreferrer"}},[a._v("这里的模板"),e("OutboundLink")],1),a._v("。待配置文件准备就绪后键入以下命令进行部署。部署前请记下配置文件中你所设置的端口号，在部署时需要将其映射到宿主机上，否则将无法访问。此处假设设定的端口号为 8888，需要映射到宿主机的 8888 端口上。"),e("code",[a._v("TZ")]),a._v(" 变量根据你所在的时区设置。如果你的 "),e("code",[a._v("config.json")]),a._v(" 不在 "),e("code",[a._v("/etc/v2ray")]),a._v(" 下，则把 "),e("code",[a._v("-v /etc/v2ray:/etc/v2ray")]),a._v(" 第一个路径改成你的 "),e("code",[a._v("config.json")]),a._v(" 所在目录。完整命令为：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker run -d --name v2ray -e TZ=Asia/Shanghai -v /etc/v2ray:/etc/v2ray -p 8888:8888 --restart always v2fly/v2fly-core run -c /etc/v2ray/config.json\n")])])]),e("p",[a._v("键入以上命令后，命令行会出现一串字符，代表容器部署成功，可以立即通过客户端连接并开始使用了。如果还不放心，键入以下命令来查看容器的运行状态：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker container ls\n")])])]),e("p",[a._v("如果看到输出的结果中 "),e("code",[a._v("STATUS")]),a._v(" 有 "),e("code",[a._v("UP")]),a._v(" 字样则代表容器正在运行：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v('$ docker container ls\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                     NAMES\n2a7sdo87kdf3        v2fly/v2fly-core      "/usr/bin/v2ray run …"   3 minutes ago       Up 3 minutes        0.0.0.0:8888->8888/tcp    v2ray\n')])])]),e("p",[a._v("通过以下命令来启动 V2Ray：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker container start v2ray\n")])])]),e("p",[a._v("停止 V2Ray：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker container stop v2ray\n")])])]),e("p",[a._v("重启 V2Ray：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker container restart v2ray\n")])])]),e("p",[a._v("查看日志：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker container logs v2ray\n")])])]),e("p",[a._v("更新配置后，需要重新部署容器，命令如下：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("$ sudo docker container stop v2ray\n$ sudo docker container rm v2ray\n$ sudo docker run -d --name v2ray -e TZ=Asia/Shanghai -v /etc/v2ray:/etc/v2ray -p 8888:8888 --restart always v2fly/v2fly-core run -c /etc/v2ray/config.json\n")])])]),e("p",[a._v("假如你的配置换了端口号，那么相应的端口映射也要更改，假如你在配置文件中把监听端口改为了 9999，则 "),e("code",[a._v("-p")]),a._v(" 参数应该这样写：")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("-p 9999:9999\n")])])]),e("p",[a._v("假如你想将容器中的端口映射到本机的端口，则命令应该这样写")]),a._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[a._v("-p 127.0.0.1:端口号:端口号\n")])])]),e("p",[a._v("如果 V2Ray 用的传输层协议是 mKCP，由于 mKCP 基于 UDP，那么需要指定映射的端口是 UDP：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-p 9999:9999/udp\n")])])]),e("p",[e("strong",[a._v("除非你打算使用 Nginx 来转发 Websocket 否则不需要映射到本地，直接填写"),e("code",[a._v("端口号:端口号")]),a._v("的形式即可")])]),a._v(" "),e("p",[a._v("另外，如果开启了动态端口，"),e("code",[a._v("-p")]),a._v(" 标记可以多次使用来绑定多个端口。具体用法是在指令中再加上多个 "),e("code",[a._v("-p")]),a._v(" 标记即可。")]),a._v(" "),e("h2",{attrs:{id:"更新策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新策略"}},[a._v("#")]),a._v(" 更新策略")]),a._v(" "),e("h3",{attrs:{id:"手动更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动更新"}},[a._v("#")]),a._v(" 手动更新")]),a._v(" "),e("p",[a._v("更新 V2Ray 的 Docker 镜像：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker pull v2fly/v2fly-core\n")])])]),e("p",[a._v("更新完之后，你需要重新部署容器，方法见上。")]),a._v(" "),e("h3",{attrs:{id:"自动更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动更新"}},[a._v("#")]),a._v(" 自动更新")]),a._v(" "),e("p",[a._v("如果你想让自己的 V2Ray 容器自动更新，无需手动部署。可以尝试 "),e("a",{attrs:{href:"https://github.com/containrrr/watchtower",target:"_blank",rel:"noopener noreferrer"}},[a._v("watchtower"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("p",[e("strong",[a._v("注意")]),a._v("：以下命令会让你的所有容器自动更新。如果想只更新 V2Ray，请参考 "),e("a",{attrs:{href:"https://containrrr.dev/watchtower/arguments/",target:"_blank",rel:"noopener noreferrer"}},[a._v("containrrr.dev"),e("OutboundLink")],1)]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);